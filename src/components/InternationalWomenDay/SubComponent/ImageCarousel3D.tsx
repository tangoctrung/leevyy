import React, { useState } from 'react';
import Image from 'next/image';
import "./index.css"
import { TypeAnimation } from 'react-type-animation';
import { Icon } from '@iconify/react/dist/iconify.js';
import Modal from '@/components/common/modal';
import SakuraFalling from './SakuraFall';

type Props = {
  setStep: any
}
function ImageCarousel3D({
  setStep,
}: Props) {

  const [isComplete, setIsComplete] = useState(false)
  const [isOpenModal, setIsOpenModal] = useState(false)
  const [isSound, setIsSound] = useState<boolean>(false)
  const [isShowClose, setIsShowClose] = useState(false)
  const [indexImage, setIndexImage] = useState(0)
  const [imageChoosed, setImageChoosed] = useState({
    image1: "/gift.gif",
    image2: "/gift.gif",
    image3: "/gift.gif",
    image4: "/gift.gif",
    image5: "/gift.gif",
  })
  const [dataClick, setDataClick] = useState<{ image: string, text: string }>({
    image: "",
    text: ""
  })
  const dataLightCycle = [
    {
      image: "/leevyy1.jpeg",
      // image: "/images.jpeg",
      text: "Xin ch√†o b√© iu, 8/3 ƒë·∫ßu ti√™n anh g·∫∑p ƒë∆∞·ª£c em n√®, hi v·ªçng em c√≥ m·ªôt ng√†y th·∫≠t l√† √Ω nghƒ©a. D√π ch·ªâ l√† m·ªõi quen, nh∆∞ng m√† ch√∫c em:\n" +
        "M·ªôt ng√†y h·∫°nh ph√∫c,\n" +
        "m·ªôt ƒë·ªùi b√¨nh y√™n,\n" +
        "cu·ªôc s·ªëng kh√¥ng ∆∞u phi·ªÅn,\n" +
        "v√† c√≥ anh k·ªÅ b√™n.\n" +
        "üòäüòäüòäüòäüòä",
    },
    {
      image: "/leevyy5.png",
      // image: "/images.jpeg",
      text: "Hic, em nh√¨n ·∫£nh n√†y xem, gi·ªëng ƒë·ª©a b√© l·ªõp 7 qu√°, nh∆∞ng m√† c≈©m cute si√™u ƒë·ªânh lu√¥nüòçüòçüòç\n" +
        "Ai da, b√¢y gi·ªù mu·ªën n·ª±ng m√° em qu√°, si√™u nh·ªõ b√© c∆∞ng lu√¥n.\n" +
        "√Ä h√¥m nay c√≥ ai t·∫∑ng hoa c≈©m b·∫£o l√† m√¨nh c√≥ m·ªëi kh√°c r·ªìi nh√© üòíüòíüòí, ƒë·ª´ng c√≥ m√† nh·∫≠n hoa xong nh·∫≠n t√¨nh c·∫£m c·ªßa ng∆∞·ªùi ta ƒë√≥ üòåüòåüòå.",
    },
    {
      image: "/leevyy3.jpeg",
      // image: "/images.jpeg",
      text: "Wow, h√£y nh√¨n c√¥ng ch√∫a c·ªßa anh n√®, kh√¥ng bi·∫øt em c√≥ ghen t·ªµ kh√¥ng, ch·ª© anh h∆°i b·ªã ghen t·ªµ v√¨ nhan s·∫Øc si√™u ph·∫©m n√†y nha.\n" +
        "M√¥i th∆°m qu√° ƒëi, l·∫ßn g·∫∑p t·ªõi em bi·∫øt ph·∫£i l√†m g√¨ r√πi ƒë√≥üòâüòâüòâ,"
    },
    {
      image: "/leevyy2.jpeg",
      // image: "/images.jpeg",
      text: "Em ƒë·ªãnh l∆∞·ªùm ai z·∫≠y tr·ªùi, nh√¨n gh√©c v√£i. Anh m√† ·ªü ƒë·∫•y l√† b√∫ng m≈©i em ƒë√≥ bi·∫øt ch∆∞aüòöüòöüòö\n" +
        "Anh c√≥ b√†i th∆° n√†y t·∫∑ng em n√®, nh∆∞ng m√† m·ªü n·ªët h·ªôp qu√† cu·ªëi nha, hehe\n"
    },
    {
      image: "/leevyy4.png",
      // image: "/images.jpeg",
      text: "T·∫∑ng em b√†i th∆° n√†y n√®\n" +
        "ƒê·ªùi anh s·∫Ω ch·ªâ l√† m√†n ƒë√™m\n" +
        "N·∫øu nh∆∞ kh√¥ng bao gi·ªù em ƒë·∫øn\n" +
        "ƒê·ªùi anh s·∫Ω v√¥ c√πng h·∫°nh ph√∫c\n" +
        "N·∫øu nh∆∞ ƒë√£ c√≥ em k·ªÅ b√™n\n" +
        "M√†n ƒë√™m trong anh ph·ªß b·∫ßu tr·ªùi\n" +
        "C√¥ ƒë∆°n ƒëau kh·ªï kh·∫Øp m·ªçi n∆°i\n" +
        "Nh∆∞ng khi em v·ª´a m·ªõi b∆∞·ªõc v√†o\n" +
        "N√≥ ƒë√£ tr·ªü th√†nh n∆°i tuy·ªát v·ªùi\n" +
        "B√†i th∆° c√≤n m·ªôt kh√∫c n·ªØa, nh∆∞ng m√† anh s·∫Ω ƒë·ªçc cho em nghe v√†o m·ªôt d·ªãp ƒë·∫∑c bi·ªát nhaüòöüòöüòö"
    }
  ]
  function handleClickImage(name: "image1" | "image2" | "image3" | "image4" | "image5") {
    if (imageChoosed[`${name}`] !== "/gift.gif") {
      return
    }
    setImageChoosed({
      ...imageChoosed,
      [name]: dataLightCycle[indexImage].image
    })
    setDataClick(dataLightCycle[indexImage])
    setIndexImage(i => i + 1)
  }

  function handleCloseImage() {
    setDataClick({
      image: "",
      text: ""
    })
    setIsShowClose(false)
    if (indexImage >= 5) {
      setIsComplete(true)
    }
  }

  function handleClickGuide() {
    setIsOpenModal(true)
  }

  function handleComplete() {
    setStep("2")
  }

  return (
    <div className='relative'>
      {!isComplete &&
        <div className='fixed left-[20px] top-10'>
          <button
            className='w-[130px] h-[42px] hover:scale-[1.15] opacity-40 duration-200 flex items-center justify-center bg-gray-700 font-mono outline-none border-none rounded-lg cursor-pointer'
            title='Click me'
            onClick={handleClickGuide}
          >
            <p className="text-sm font-bold">H∆∞·ªõng d·∫´n</p>
            <div className='h-full w-[36px] flex justify-center items-center'>
              <Icon icon={"tdesign:gesture-click-filled"} className='iconClick w-6 h-6' />
            </div>
          </button>
        </div>}
      {isComplete &&
        <div className='absolute left-[50%] translate-x-[-50%] bottom-[-200px]'>
          <button
            className='w-[130px] h-[42px] hover:scale-[1.15] opacity-90 duration-200 flex items-center justify-center bg-gray-700 font-mono outline-none border-none rounded-lg cursor-pointer'
            title='Click me'
            onClick={handleComplete}
          >
            <p className="text-sm font-bold">Qua m√†n</p>
            <div className='h-full w-[36px] flex justify-center items-center'>
              <Icon icon={"tdesign:gesture-click-filled"} className='iconClick w-6 h-6' />
            </div>
          </button>
        </div>}
      <div className='absolute w-full h-full bg-slate-400 blur-[100px]'></div>
      <div className="containerLightCycle relative w-[300px] h-[180px]">
        <div className='itemContainerImage itemContainerImage1'>
          <Image
            src={imageChoosed.image1}
            width={400}
            height={800}
            alt=''
            className='itemImage'
            onClick={() => handleClickImage("image1")}
          />
        </div>
        <div className='itemContainerImage itemContainerImage2'>
          <Image
            src={imageChoosed.image2}
            width={400}
            height={800}
            alt=''
            className='itemImage'
            onClick={() => handleClickImage("image2")}
          />
        </div>
        <div className='itemContainerImage itemContainerImage3'>
          <Image
            src={imageChoosed.image3}
            width={400}
            height={800}
            alt=''
            className='itemImage'
            onClick={() => handleClickImage("image3")}
          />
        </div>
        <div className='itemContainerImage itemContainerImage4'>
          <Image
            src={imageChoosed.image4}
            width={400}
            height={800}
            alt=''
            className='itemImage'
            onClick={() => handleClickImage("image4")}
          />
        </div>
        <div className='itemContainerImage itemContainerImage5'>
          <Image
            src={imageChoosed.image5}
            width={400}
            height={800}
            alt=''
            className='itemImage'
            onClick={() => handleClickImage("image5")}
          />
        </div>
      </div >

      <div className={`fixed left-0 top-0 w-[100svw] h-[100svh] transition-all duration-300 
        ${dataClick.image ? "z-[900] opacity-100 " : "-z-10 opacity-0"} 
      `}
      >
        <div className={`w-full h-full flex mt-[20svh] items-center flex-col`}>
          {dataClick.image &&
            <div className='relative max-w-[700px] w-[90%] rounded-xl aspect-[5/3] overflow-hidden'>
              <Image
                src={dataClick.image || ""}
                width={1800}
                height={900}
                alt=''
                className='w-full h-full object-cover'
              />
              <div className='absolute top-0 right-[0%] max-w-[50%] rounded-md bg-gray-600/30 p-2 flex justify-center'>
                <h3 className='w-fit font-mono text-base font-semibold'>
                  <TypeAnimation
                    sequence={[
                      // Same substring at the start will only be typed once, initially
                      1000,
                      () => {
                        setIsSound(true);
                        setIsShowClose(false);
                      },
                      dataClick.text,
                      () => {
                        setIsSound(false);
                        setIsShowClose(true);
                      },
                    ]}
                    speed={20}
                    style={{ whiteSpace: 'pre-line', display: 'block' }}
                  />
                </h3>
              </div>
              {isShowClose &&
                <div
                  className='absolute top-0 left-0 cursor-pointer p-1 rounded-full bg-gray-200 font-mono font-semibold text-sm'
                  onClick={handleCloseImage}
                >
                  <Icon icon="iconamoon:close-bold" className='text-red-600' />
                </div>}
            </div>}

        </div>
      </div>
      <Modal isOpen={isOpenModal} setIsOpen={setIsOpenModal}>
        <div className='p-5 rounded-xl w-[360px] bg-slate-700'>
          ·ªû ƒë√¢y c√≥ 5 ph·∫ßn qu√†, em ·∫•n v√†o t·ª´ng ph·∫ßn qu√† n√≥ s·∫Ω hi·ªán ·∫£nh v√† th√¥ng ƒëi·ªáp anh mu·ªën g·ª≠i ƒë·∫øn em, khi th√¥ng ƒëi·ªáp ch·∫°y xong s·∫Ω hi·ªán m·ªôt n√∫t ƒë·ªÉ t·∫Øt ·ªü g√≥c tr√™n b√™n tr√°i nh√©, v√† em m·ªü xong 5 ph·∫ßn qu√† l√† ho√†n th√†nh, khi ƒë√≥ s·∫Ω hi·ªán n√∫t Qua m√†n, em ·∫•n v√†o n√∫t ƒë√≥ nh√© :))
        </div>
      </Modal>
      {isSound &&
        <audio autoPlay loop hidden>
          <source src="/soundTypeKeyboard.mp3" type="audio/mpeg" />
        </audio>}

      {isComplete && <SakuraFalling />}
    </div>
  );
}

export default ImageCarousel3D;